"""Streamlit UI for House Price Prediction API - Simplified version."""

import os
import socket
import requests
import streamlit as st

# Friendly label mappings for categorical features
NEIGHBORHOOD_OPTIONS = {
    "B·∫Øc Ames (NAmes)": "NAmes",
    "College Creek (CollgCr)": "CollgCr",
    "Old Town (OldTown)": "OldTown",
    "Edwards (Edwards)": "Edwards",
}

MSZONING_OPTIONS = {
    "Nh√† ·ªü m·∫≠t ƒë·ªô th·∫•p (RL)": "RL",
    "Nh√† ·ªü m·∫≠t ƒë·ªô trung b√¨nh (RM)": "RM",
    "Khu l√†ng n·ªïi/ngo·∫°i l·ªá (FV)": "FV",
}

QUALITY_SIMPLE = {
    "Xu·∫•t s·∫Øc (Ex)": "Ex",
    "T·ªët (Gd)": "Gd",
    "Trung b√¨nh (TA)": "TA",
}

HOUSE_STYLE_OPTIONS = {
    "1 t·∫ßng (1Story)": "1Story",
    "2 t·∫ßng (2Story)": "2Story",
    "1.5 t·∫ßng ho√†n thi·ªán (1.5Fin)": "1.5Fin",
    "1.5 t·∫ßng ch∆∞a ho√†n thi·ªán (1.5Unf)": "1.5Unf",
    "2.5 t·∫ßng ho√†n thi·ªán (2.5Fin)": "2.5Fin",
    "2.5 t·∫ßng ch∆∞a ho√†n thi·ªán (2.5Unf)": "2.5Unf",
    "G√°c l·ª≠ng c·∫ßu thang (SFoyer)": "SFoyer",
    "B√°n h·∫ßm/b√°n t·∫ßng (SLvl)": "SLvl",
}

# Page configuration
st.set_page_config(
    page_title="D·ª± ƒëo√°n gi√° nh√†",
    page_icon="üè†",
    layout="wide",
)

# Initialize session state
if "prediction" not in st.session_state:
    st.session_state.prediction = None

API_URL = os.getenv("API_URL", "http://localhost:8000")

# Styles
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap');
    html, body, [class*="css"] { font-family: 'Inter', sans-serif; }
    .main-header {
        background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%);
        padding: 2rem;
        border-radius: 16px;
        margin-bottom: 2rem;
        color: white;
    }
    .main-title { font-size: 32px; font-weight: 800; margin: 0; }
    .main-subtitle { font-size: 14px; margin: 8px 0 0; opacity: 0.9; }
    .prediction-box {
        background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        border: 2px solid #e5e7eb;
        border-radius: 16px;
        padding: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
    }
    .prediction-label {
        font-size: 14px;
        color: #6b7280;
        margin: 0 0 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    .prediction-value {
        font-size: 48px;
        font-weight: 800;
        background: linear-gradient(135deg, #3b82f6, #06b6d4);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0;
    }
    </style>
""",
    unsafe_allow_html=True,
)


def call_api(features):
    """Call the prediction API."""
    try:
        response = requests.post(f"{API_URL}/predict", json=features, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"‚ùå Error: {e}")
        return None


def apply_preset():
    preset = st.session_state.get("preset", "")
    if not preset:
        return
    if preset == "Nh√† gia ƒë√¨nh 1 t·∫ßng, khu RL":
        st.session_state["neighborhood"] = "B·∫Øc Ames (NAmes)"
        st.session_state["ms_zoning"] = "Nh√† ·ªü m·∫≠t ƒë·ªô th·∫•p (RL)"
        st.session_state["gr_liv_area"] = 1500
        st.session_state["first_flr"] = 1200
        st.session_state["second_flr"] = 0
        st.session_state["bedrooms"] = 3
        st.session_state["full_bath"] = 2
        st.session_state["half_bath"] = 1
        st.session_state["total_bsmt"] = 800
        st.session_state["house_style"] = "1 t·∫ßng (1Story)"
        st.session_state["year_built"] = 2005
        st.session_state["yr_sold"] = 2010
    elif preset == "Nh√† 2 t·∫ßng, trung t√¢m RM":
        st.session_state["neighborhood"] = "College Creek (CollgCr)"
        st.session_state["ms_zoning"] = "Nh√† ·ªü m·∫≠t ƒë·ªô trung b√¨nh (RM)"
        st.session_state["gr_liv_area"] = 2000
        st.session_state["first_flr"] = 1000
        st.session_state["second_flr"] = 900
        st.session_state["bedrooms"] = 4
        st.session_state["full_bath"] = 2
        st.session_state["half_bath"] = 1
        st.session_state["total_bsmt"] = 900
        st.session_state["house_style"] = "2 t·∫ßng (2Story)"
        st.session_state["year_built"] = 2012
        st.session_state["yr_sold"] = 2014
    elif preset == "Nh√† nh·ªè OldTown":
        st.session_state["neighborhood"] = "Old Town (OldTown)"
        st.session_state["ms_zoning"] = "Nh√† ·ªü m·∫≠t ƒë·ªô th·∫•p (RL)"
        st.session_state["gr_liv_area"] = 900
        st.session_state["first_flr"] = 800
        st.session_state["second_flr"] = 0
        st.session_state["bedrooms"] = 2
        st.session_state["full_bath"] = 1
        st.session_state["half_bath"] = 0
        st.session_state["total_bsmt"] = 600
        st.session_state["house_style"] = "1 t·∫ßng (1Story)"
        st.session_state["year_built"] = 1950
        st.session_state["yr_sold"] = 2008


# Main UI
st.markdown(
    """
    <div class="main-header">
        <h1 class="main-title">üè† D·ª± ƒëo√°n gi√° nh√†</h1>
        <p class="main-subtitle">M√°y h·ªçc d·ª± ƒëo√°n gi√° theo ƒë·∫∑c tr∆∞ng b·∫°n nh·∫≠p ‚Ä¢ T·∫•t c·∫£ tr∆∞·ªùng l√† t√πy ch·ªçn</p>
    </div>
""",
    unsafe_allow_html=True,
)

col_left, col_right = st.columns([1.2, 1], gap="large")

with col_left:
    st.markdown("### üìù Th√¥ng tin cƒÉn nh√†")
    features = {}

    # -------- Quick presets (auto-fill widgets) --------
    st.markdown("#### üéØ G·ª£i √Ω nhanh")
    st.selectbox(
        "Ch·ªçn m·∫´u tham kh·∫£o",
        [
            "",
            "Nh√† gia ƒë√¨nh 1 t·∫ßng, khu RL",
            "Nh√† 2 t·∫ßng, trung t√¢m RM",
            "Nh√† nh·ªè OldTown",
        ],
        key="preset",
        on_change=apply_preset,
        help="T·ª± ƒë·ªông ƒëi·ªÅn c√°c tr∆∞·ªùng b√™n d∆∞·ªõi ƒë·ªÉ thao t√°c nhanh",
    )

    tab1, tab2, tab3, tab4 = st.tabs(
        ["üè¢ C∆° b·∫£n", "üèõÔ∏è C·∫•u tr√∫c & B·ªë c·ª•c", "üöó Gara", "üé® Ch·∫•t l∆∞·ª£ng"]
    )

    with tab1:
        st.markdown("**Khu v·ª±c & Di·ªán t√≠ch**")
        col1, col2 = st.columns(2)
        with col1:
            neighborhood_label = st.selectbox(
                "Khu ph·ªë (Neighborhood)",
                [""] + list(NEIGHBORHOOD_OPTIONS.keys()),
                index=0,
                key="neighborhood",
                help="V·ªã tr√≠ khu ph·ªë theo t·∫≠p d·ªØ li·ªáu Ames",
            )
            if neighborhood_label:
                features["Neighborhood"] = NEIGHBORHOOD_OPTIONS[neighborhood_label]
            lot_area = st.number_input(
                "Di·ªán t√≠ch l√¥ ƒë·∫•t (ft¬≤)",
                min_value=0,
                value=0,
                step=100,
                help="T·ªïng di·ªán t√≠ch l√¥ ƒë·∫•t",
            )
            if lot_area > 0:
                features["LotArea"] = int(lot_area)

        with col2:
            ms_zoning_label = st.selectbox(
                "Ph√¢n v√πng quy ho·∫°ch (MS Zoning)",
                [""] + list(MSZONING_OPTIONS.keys()),
                index=0,
                key="ms_zoning",
                help="Lo·∫°i ph√¢n v√πng quy ho·∫°ch s·ª≠ d·ª•ng ƒë·∫•t",
            )
            if ms_zoning_label:
                features["MSZoning"] = MSZONING_OPTIONS[ms_zoning_label]
            lot_frontage = st.number_input(
                "M·∫∑t ti·ªÅn l√¥ ƒë·∫•t (ft)",
                min_value=0,
                value=0,
                step=1,
                help="Chi·ªÅu d√†i ti·∫øp gi√°p ƒë∆∞·ªùng",
            )
            if lot_frontage > 0:
                features["LotFrontage"] = float(lot_frontage)

    with tab2:
        st.markdown("**C·∫•u tr√∫c & B·ªë c·ª•c**")
        # Above-grade living area
        gr_liv_area = st.number_input(
            "Di·ªán t√≠ch s·ª≠ d·ª•ng tr√™n m·∫∑t ƒë·∫•t (ft¬≤)",
            min_value=0,
            value=0,
            step=50,
            help="Di·ªán t√≠ch ·ªü c√≥ th·ªÉ s·ª≠ d·ª•ng n·∫±m tr√™n m·∫∑t ƒë·∫•t",
            key="gr_liv_area",
        )
        if gr_liv_area > 0:
            features["GrLivArea"] = int(gr_liv_area)

        col1, col2 = st.columns(2)
        with col1:
            first_flr = st.number_input(
                "Di·ªán t√≠ch t·∫ßng 1 (ft¬≤)",
                min_value=0,
                value=0,
                step=50,
                help="Di·ªán t√≠ch s√†n ƒë√£ ho√†n thi·ªán c·ªßa t·∫ßng 1",
                key="first_flr",
            )
            if first_flr > 0:
                features["1stFlrSF"] = int(first_flr)

            bedrooms = st.number_input(
                "S·ªë ph√≤ng ng·ªß (tr√™n m·∫∑t ƒë·∫•t)",
                min_value=0,
                value=0,
                step=1,
                format="%d",
                help="S·ªë ph√≤ng ng·ªß n·∫±m tr√™n m·∫∑t ƒë·∫•t",
                key="bedrooms",
            )
            if bedrooms > 0:
                features["BedroomAbvGr"] = int(bedrooms)

            full_bath = st.number_input(
                "Ph√≤ng t·∫Øm ƒë·∫ßy ƒë·ªß (tr√™n m·∫∑t ƒë·∫•t)",
                min_value=0,
                value=0,
                step=1,
                format="%d",
                help="Ph√≤ng t·∫Øm c√≥ ƒë·ªß b·ªìn/t·∫Øm ƒë·ª©ng, b·ªìn r·ª≠a, b·ªìn c·∫ßu",
                key="full_bath",
            )
            if full_bath > 0:
                features["FullBath"] = int(full_bath)

        with col2:
            second_flr = st.number_input(
                "Di·ªán t√≠ch t·∫ßng 2 (ft¬≤)",
                min_value=0,
                value=0,
                step=50,
                help="Di·ªán t√≠ch s√†n ƒë√£ ho√†n thi·ªán c·ªßa t·∫ßng 2",
                key="second_flr",
            )
            if second_flr > 0:
                features["2ndFlrSF"] = int(second_flr)

            half_bath = st.number_input(
                "Ph√≤ng t·∫Øm 1/2 (tr√™n m·∫∑t ƒë·∫•t)",
                min_value=0,
                value=0,
                step=1,
                format="%d",
                help="Ph√≤ng t·∫Øm kh√¥ng c√≥ b·ªìn/t·∫Øm ƒë·ª©ng (ch·ªâ b·ªìn r·ª≠a + b·ªìn c·∫ßu)",
                key="half_bath",
            )
            if half_bath > 0:
                features["HalfBath"] = int(half_bath)

        # Advanced options in Structure
        with st.expander("T√πy ch·ªçn n√¢ng cao (C·∫•u tr√∫c)"):
            total_bsmt = st.number_input(
                "T·ªïng di·ªán t√≠ch t·∫ßng h·∫ßm (ft¬≤)",
                min_value=0,
                value=0,
                step=50,
                help="T·ªïng di·ªán t√≠ch t·∫ßng h·∫ßm (bao g·ªìm ph·∫ßn ho√†n thi·ªán v√† ch∆∞a ho√†n thi·ªán)",
                key="total_bsmt",
            )
            if total_bsmt > 0:
                features["TotalBsmtSF"] = int(total_bsmt)

        # House style
        house_style_label = st.selectbox(
            "Ki·ªÉu nh√†",
            [""] + list(HOUSE_STYLE_OPTIONS.keys()),
            index=0,
            help="Ki·ªÉu ki·∫øn tr√∫c/thi·∫øt k·∫ø t·ªïng th·ªÉ c·ªßa cƒÉn nh√†",
            key="house_style",
        )
        if house_style_label:
            features["HouseStyle"] = HOUSE_STYLE_OPTIONS[house_style_label]

    with tab3:
        st.markdown("**Gara & T·∫ßng h·∫ßm**")
        garage_cars = st.number_input(
            "S·ªë ch·ªó ƒë·∫≠u xe trong gara",
            min_value=0,
            value=0,
            step=1,
            format="%d",
            help="S·ª©c ch·ª©a theo s·ªë xe √¥ t√¥",
        )
        if garage_cars > 0:
            features["GarageCars"] = int(garage_cars)
        garage_area = st.number_input(
            "Di·ªán t√≠ch gara (ft¬≤)",
            min_value=0,
            value=0,
            step=20,
            help="T·ªïng di·ªán t√≠ch s√†n c·ªßa gara",
        )
        if garage_area > 0:
            features["GarageArea"] = float(garage_area)

    with tab4:
        st.markdown("**Ch·∫•t l∆∞·ª£ng & T√¨nh tr·∫°ng**")
        col1, col2 = st.columns(2)

        with col1:
            overall_qual = st.selectbox(
                "Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ",
                ["", "10", "9", "8", "7", "6", "5"],
                index=0,
                help="Ch·∫•t l∆∞·ª£ng v·∫≠t li·ªáu v√† m·ª©c ƒë·ªô ho√†n thi·ªán",
            )
            if overall_qual:
                features["OverallQual"] = int(overall_qual)
            kitchen_qual_label = st.selectbox(
                "Ch·∫•t l∆∞·ª£ng b·∫øp",
                [""] + list(QUALITY_SIMPLE.keys()),
                index=0,
                help="ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng khu b·∫øp",
                key="kitchen_qual",
            )
            if kitchen_qual_label:
                features["KitchenQual"] = QUALITY_SIMPLE[kitchen_qual_label]

        with col2:
            overall_cond = st.selectbox(
                "T√¨nh tr·∫°ng t·ªïng th·ªÉ",
                ["", "10", "9", "8", "7", "6", "5"],
                index=0,
                help="ƒê√°nh gi√° t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa cƒÉn nh√†",
            )
            if overall_cond:
                features["OverallCond"] = int(overall_cond)
            exter_qual_label = st.selectbox(
                "Ch·∫•t l∆∞·ª£ng ngo·∫°i th·∫•t",
                [""] + list(QUALITY_SIMPLE.keys()),
                index=0,
                help="Ch·∫•t l∆∞·ª£ng v·∫≠t li·ªáu v√† ho√†n thi·ªán b√™n ngo√†i",
                key="exter_qual",
            )
            if exter_qual_label:
                features["ExterQual"] = QUALITY_SIMPLE[exter_qual_label]

        year_built = st.number_input(
            "NƒÉm x√¢y d·ª±ng",
            min_value=1800,
            max_value=2025,
            value=2000,
            step=1,
            help="NƒÉm ho√†n th√†nh x√¢y d·ª±ng ban ƒë·∫ßu",
            key="year_built",
        )
        features["YearBuilt"] = int(year_built)

        yr_sold = st.number_input(
            "NƒÉm b√°n",
            min_value=2000,
            max_value=2025,
            value=2024,
            step=1,
            help="NƒÉm giao d·ªãch b√°n di·ªÖn ra",
            key="yr_sold",
        )
        features["YrSold"] = int(yr_sold)

    st.markdown("---")
    # (ƒë√£ b·ªè block g·ª£i √Ω nhanh th·ª© hai ƒë·ªÉ tr√°nh tr√πng l·∫∑p)

    predict_btn = st.button("üöÄ D·ª± ƒëo√°n gi√°", type="primary", use_container_width=True)

with col_right:
    st.markdown("### üí∞ K·∫øt qu·∫£ d·ª± ƒëo√°n")

    if predict_btn:
        if not features:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒë·∫∑c tr∆∞ng.")
        else:
            with st.spinner("ü§î ƒêang t√≠nh to√°n..."):
                result = call_api(features)
                if result:
                    st.session_state.prediction = result
                    st.rerun()

    if st.session_state.prediction:
        pred = st.session_state.prediction
        price = pred.get("predicted_price", 0)

        st.markdown(
            f"""
            <div class="prediction-box">
                <p class="prediction-label">Gi√° d·ª± ƒëo√°n</p>
                <p class="prediction-value">${price:,.0f}</p>
            </div>
        """,
            unsafe_allow_html=True,
        )

        if "confidence_interval" in pred:
            ci = pred["confidence_interval"]
            st.markdown("#### üìà Kho·∫£ng gi√°")
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric("Th·∫•p", f"${ci.get('lower', price*0.9):,.0f}")
            with col_b:
                st.metric("Cao", f"${ci.get('upper', price*1.1):,.0f}")

        if st.button("üîÑ D·ª± ƒëo√°n cƒÉn kh√°c", use_container_width=True):
            st.session_state.prediction = None
            st.rerun()
    else:
        st.markdown(
            """
            <div style="display: flex; height: 400px; align-items: center; justify-content: center;
                        text-align: center; color: #6b7280;">
                <div>
                    <p style="font-size: 24px; margin: 0;">üëà Nh·∫≠p th√¥ng tin cƒÉn nh√†</p>
                    <p style="font-size: 14px;">ƒêi·ªÅn form ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ d·ª± ƒëo√°n</p>
                </div>
        </div>
        """,
            unsafe_allow_html=True,
        )

# Footer
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown(
    f"""
    <div style="text-align: center; color: #9ca3af; margin-top: 20px;">
        <p><strong>üè† D·ª± ƒëo√°n gi√° nh√† v1.0.0</strong></p>
        <p style="font-size: 12px;">M√°y ch·ªß: {socket.gethostname()} | API: {API_URL}</p>
    </div>
""",
    unsafe_allow_html=True,
)

if __name__ == "__main__":
    pass
